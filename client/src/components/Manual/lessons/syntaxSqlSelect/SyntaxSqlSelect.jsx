import React from 'react';
import { useSelector } from 'react-redux';
import s from './SyntaxSqlSelect.module.css';
import manual from '../../../utils/manual.json';
import { NavLink } from 'react-router-dom';
import Footer from '../../../main-screen/footer/Footer'


export default function SyntaxSqlSelect() {

  const itemTitle = useSelector(state => state.manualReducer.itemTitle);
  console.log('itemTitle: ', itemTitle);
  
  const theory = useSelector(state => state.manualReducer.theory);
  console.log('theory: ', theory);  

  return (
  <div className={s.main}>
  <div className={s.container}>
      <div className={s.content}>
      <div className={s.container__title}>
        <h2 className={s.container__title}>Основы SQL (MySQL)</h2>
      </div>
      <p>В реляционных СУБД для выполнения операций над отношениями используются две группы языков, в качестве математической базы для которых используются теоретические языки запросов, предложенные Эдгаром Коддом:</p>
        <div>
            <li>реляционная алгебра;</li>
            <li>реляционное исчисление.</li>
        </div>
        <p>В первом случае (реляционная алгебра) операнды и результаты всех действий являются отношениями. Такие языки — процедурные, поскольку отношение, которое является результатом запроса к базе данных, вычисляется при последовательном выполнении операторов, применяемым к отношениям. Сами операторы состоят из операндов (отношений) и реляционных операций (их результатом тоже является отношение).</p>
        <p>Языки реляционного исчисления — непроцедурные, их называют описательными или декларативными. Они позволяют составлять запросы с помощью предиката первого порядка, которому должны удовлетворять кортежи или домены отношений. Таким образом, запрос к базе данных на таком языке содержит только информацию о желаемом результате. К языкам этой группы относится и SQL.</p>
        <p>SQL (Structured Query Language, "язык структурированных запросов") — универсальный язык, применяемый для создания, модификации и управления данными в реляционных базах данных. В нем создается линейная последовательность операторов языка, которые выполняются СУБД. Операторы состоят из:</p>

        
        <li>имен операций и функций;</li>
        <li>имен таблиц и их столбцов;</li>
        <li>зарезервированных ключевых слов и специальных символов;</li>
        <li>логических, арифметических и строковых выражений.</li>

        <p>Общий вид простого оператора в SQL:</p>

      <div className={s.definition}>
           <p>ОПЕРАТОР параметры;</p>
        </div>
        <p>Если параметр не один, а несколько, то они перечисляются через запятую.
        Все предложения на языке SQL оканчиваются точкой с запятой. Например:
        </p>
      <div className={s.definition}>
           <p>USE `first_lab_data_base`;<br />
            SELECT `id`, `field1` FROM `mytable`;
            </p>
        </div>
        <p>Выражения в SQL не зависят от регистра, не требуют обязательного наличия кавычек при обозначении названий, дополнительные разделители (пробел, табуляция, переход на новую строку) игнорируются. Для обозначения названий баз данных, таблиц, атрибутов таблиц, то есть названий, связанных с объектами СУБД, могут использоваться кавычки типа «тупое ударение» («`»). Например:</p>
        <div className={s.definition}>
           <p>`элемент_бд`
            </p>
        </div>

        <p>Для текстовых данных, вводимых пользователем в базу и не связанных с элементами СУБД (например, обычных строковых значений), используются обычные или двойные кавычки: 'текст', "большой текст". Чтобы с помощью двойных кавычек указать строку, которая уже содержит двойные кавычки в конце и начале выражения, нужно записывать ее так (экранирование):</p>
        <div className={s.definition}>
           <p>"\"заголовок\""</p>
        </div>

        <p>Существует общепринятый стиль «правильного» оформления выражений. Оно заключается в том, что при написании каких-либо выражений:</p>

        <li> после естественных разделителей выражений (например, запятых) ставится пробел;</li>
        <li>  дополнительные разделители (пробелы, табы) не используются, если нет необходимости записать многостроковое выражение в удобном для чтения виде;</li>
        <li>  системные обозначения (названия операторов, функций, ключевых слов и т.п.) пишутся заглавными буквами;</li>
        <li>  при указании названий, связанных с объектами СУБД, обязательно используются кавычки в виде «тупого ударения».</li>

        <p>Например:</p>  

        <div className={s.definition}>
           <p><span>SELECT</span> * <span>FROM</span> `table` [ <span>WHERE</span> условие ];</p>
        </div>

        <p>Но и как аналогичное выражение без необязательных параметров, т.е.:</p>

        <div className={s.definition}>
           <p> <span>SELECT</span> * <span>FROM</span> `table`;</p>
        </div>

      </div>
      <div className={s.navigation}>


        {/* Правый Navbar */}
        <div className={s.navigation__title}>Навигация по разделам</div>
        <div className={s.navigation__item}>
          {
            manual.map((m) =>{
              return(
                <div>
                  <div className={s.label}>
                    <span className={s.chapter__title}> {m.chapterTitle}</span>
                  </div>
                  <div className={s.items}>
                    <div className={s.item}>
                        <span className={s.number}>{m.itemNumber}</span>
                          <span className={s.itemTitle}>
                            
                            <NavLink to="#"> {m.itemTitle} </NavLink>
                            
                          </span>
                      </div>
                    </div>
                </div>
                
              )
            })
          }
        </div>
      </div>
    </div>;
    <Footer />
  </div>
 )
}
